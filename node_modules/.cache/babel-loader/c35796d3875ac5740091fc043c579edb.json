{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { ActivityIndicator as RNActivityIndicator } from 'react-native';\nimport { usePaletteColor } from './hooks/use-palette-color';\n\nconst ActivityIndicator = _ref => {\n  let {\n    color = 'primary',\n    ...rest\n  } = _ref;\n  const {\n    main\n  } = usePaletteColor(color);\n  return /*#__PURE__*/React.createElement(RNActivityIndicator, _extends({}, rest, {\n    color: main\n  }));\n};\n\nexport default ActivityIndicator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,iBAAiB,IAAIC,mBADvB,QAGO,cAHP;AAIA,SAAgBC,eAAhB,QAAuC,2BAAvC;;AAWA,MAAMF,iBAAmD,GAAGG,QAAoC;EAAA,IAAnC;IAAEC,KAAK,GAAG,SAAV;IAAqB,GAAGC;EAAxB,IAAmCF;EAC9F,MAAM;IAAEG;EAAF,IAAWJ,eAAe,CAACE,KAAD,CAAhC;EACA,oBAAOL,oBAACE,mBAAD,eAAyBI,IAAzB;IAA+BD,KAAK,EAAEE;EAAtC,GAAP;AAFF;;AAKA,eAAeN,iBAAf","names":["React","ActivityIndicator","RNActivityIndicator","usePaletteColor","_ref","color","rest","main"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/ActivityIndicator.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  ActivityIndicator as RNActivityIndicator,\n  ActivityIndicatorProps as RNActivityIndicatorProps,\n} from 'react-native';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface ActivityIndicatorProps extends Omit<RNActivityIndicatorProps, 'color'> {\n  /**\n   * The color of the spinner.\n   *\n   * @default \"primary\"\n   */\n  color?: Color;\n}\n\nconst ActivityIndicator: React.FC<ActivityIndicatorProps> = ({ color = 'primary', ...rest }) => {\n  const { main } = usePaletteColor(color);\n  return <RNActivityIndicator {...rest} color={main} />;\n};\n\nexport default ActivityIndicator;\n"]},"metadata":{},"sourceType":"module"}