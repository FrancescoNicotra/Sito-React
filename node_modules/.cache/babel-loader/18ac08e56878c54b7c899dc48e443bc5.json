{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport Box from './Box';\n\nconst Flex = _ref => {\n  let {\n    fill,\n    inline,\n    center,\n    direction,\n    justify,\n    items,\n    self,\n    content,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    style,\n    ...rest\n  } = _ref;\n  const flex = useMemo(() => typeof fill === 'boolean' ? fill ? 1 : undefined : fill, [fill]);\n  const flexDirection = useMemo(() => inline ? 'row' : direction, [inline, direction]);\n  const justifyContent = useMemo(() => {\n    if (center) return 'center';\n\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      case 'between':\n        return 'space-between';\n\n      case 'around':\n        return 'space-around';\n\n      case 'evenly':\n        return 'space-evenly';\n\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n  const alignItems = useMemo(() => {\n    if (center) return 'center';\n\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      default:\n        return items;\n    }\n  }, [center, items]);\n  const alignSelf = useMemo(() => {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      default:\n        return self;\n    }\n  }, [self]);\n  const alignContent = useMemo(() => {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n\n      case 'end':\n        return 'flex-end';\n\n      case 'between':\n        return 'space-between';\n\n      case 'around':\n        return 'space-around';\n\n      default:\n        return content;\n    }\n  }, [content]);\n  const flexWrap = useMemo(() => typeof wrap === 'boolean' ? wrap ? 'wrap' : undefined : wrap, [wrap]);\n  const flexStyle = useMemo(() => ({\n    flex,\n    flexDirection,\n    justifyContent,\n    alignItems,\n    alignSelf,\n    alignContent,\n    flexWrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink\n  }), [flex, flexDirection, justifyContent, alignItems, alignSelf, alignContent, flexWrap, basis, grow, shrink]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    style: [flexStyle, style]\n  }, rest));\n};\n\nexport default Flex;\nexport const Spacer = props => {\n  return /*#__PURE__*/React.createElement(Flex, _extends({\n    fill: true,\n    self: \"stretch\"\n  }, props));\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","Box","Flex","_ref","fill","inline","center","direction","justify","items","self","content","wrap","basis","grow","shrink","style","rest","flex","undefined","flexDirection","justifyContent","alignItems","alignSelf","alignContent","flexWrap","flexStyle","flexBasis","flexGrow","flexShrink","Spacer","props"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/react-native-flex-layout/lib/module/Flex.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport type { FlexStyle, ViewStyle } from 'react-native';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface FlexProps extends BoxProps {\n  /**\n   * Shorthand for the `flex` style property.\n   * If `true` is passed, the `flex` style property will be set to `1`.\n   */\n  fill?: boolean | number;\n\n  /**\n   * Shorthand for `{ flexDirection: \"row\" }`.\n   */\n  inline?: boolean;\n\n  /**\n   * Shorthand for `{ justifyContent: \"center\", alignItems: \"center\" }`.\n   */\n  center?: boolean;\n\n  /**\n   * Shorthand for the `flexDirection` style property.\n   */\n  direction?: FlexStyle['flexDirection'];\n\n  /**\n   * Shorthand for the `justifyContent` style property.\n   * If `center` prop is set to `true`, `justifyContent` will be forced to `center`.\n   */\n  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';\n\n  /**\n   * Shorthand for the `alignItems` style property.\n   * If `center` prop is set to `true`, `alignItems` will be forced to `center`.\n   */\n  items?: 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignSelf` style property.\n   */\n  self?: 'auto' | 'start' | 'end' | 'center' | 'stretch' | 'baseline';\n\n  /**\n   * Shorthand for the `alignContent` style property.\n   */\n  content?: 'start' | 'end' | 'center' | 'stretch' | 'between' | 'around';\n\n  /**\n   * Shorthand for the `flexWrap` style property.\n   * If `true` is passed, the `flexWrap` style property will be set to `wrap`.\n   */\n  wrap?: boolean | FlexStyle['flexWrap'];\n\n  /**\n   * Shorthand for the `flexBasis` style property.\n   */\n  basis?: FlexStyle['flexBasis'];\n\n  /**\n   * Shorthand for the `flexGrow` style property.\n   */\n  grow?: FlexStyle['flexGrow'];\n\n  /**\n   * Shorthand for the `flexShrink` style property.\n   */\n  shrink?: FlexStyle['flexShrink'];\n}\n\nconst Flex: React.FC<FlexProps> = ({\n  fill,\n  inline,\n  center,\n  direction,\n  justify,\n  items,\n  self,\n  content,\n  wrap,\n  basis,\n  grow,\n  shrink,\n  style,\n  ...rest\n}) => {\n  const flex = useMemo(\n    () => (typeof fill === 'boolean' ? (fill ? 1 : undefined) : fill),\n    [fill]\n  );\n\n  const flexDirection = useMemo(\n    () => (inline ? 'row' : direction),\n    [inline, direction]\n  );\n\n  const justifyContent = useMemo(() => {\n    if (center) return 'center';\n    switch (justify) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      case 'evenly':\n        return 'space-evenly';\n      default:\n        return justify;\n    }\n  }, [center, justify]);\n\n  const alignItems = useMemo(() => {\n    if (center) return 'center';\n    switch (items) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return items;\n    }\n  }, [center, items]);\n\n  const alignSelf = useMemo(() => {\n    switch (self) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      default:\n        return self;\n    }\n  }, [self]);\n\n  const alignContent = useMemo(() => {\n    switch (content) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'between':\n        return 'space-between';\n      case 'around':\n        return 'space-around';\n      default:\n        return content;\n    }\n  }, [content]);\n\n  const flexWrap = useMemo(\n    () => (typeof wrap === 'boolean' ? (wrap ? 'wrap' : undefined) : wrap),\n    [wrap]\n  );\n\n  const flexStyle = useMemo(\n    (): ViewStyle => ({\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      flexBasis: basis,\n      flexGrow: grow,\n      flexShrink: shrink,\n    }),\n    [\n      flex,\n      flexDirection,\n      justifyContent,\n      alignItems,\n      alignSelf,\n      alignContent,\n      flexWrap,\n      basis,\n      grow,\n      shrink,\n    ]\n  );\n\n  return <Box style={[flexStyle, style]} {...rest} />;\n};\n\nexport default Flex;\n\nexport const Spacer: React.FC<FlexProps> = (props) => {\n  return <Flex fill self=\"stretch\" {...props} />;\n};\n"]},"metadata":{},"sourceType":"module"}