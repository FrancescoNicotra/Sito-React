{"ast":null,"code":"import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nexport const PortalContext = /*#__PURE__*/createContext(null);\nexport const usePortalContext = () => {\n  const portal = useContext(PortalContext);\n\n  if (!portal) {\n    throw new Error('usePortalContext must be used within a PortalContext');\n  }\n\n  return portal;\n};\nexport const PortalProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [portals, setPortals] = useState([]);\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: {\n      portals,\n      setPortals\n    }\n  }, children);\n};\nexport const Outlet = () => {\n  const {\n    portals\n  } = usePortalContext();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, portals.map(_ref2 => {\n    let {\n      key,\n      children\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(View, {\n      key: key,\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, children);\n  }));\n};\nexport const Portal = _ref3 => {\n  let {\n    key,\n    children\n  } = _ref3;\n  const {\n    setPortals\n  } = usePortalContext();\n\n  const _key = useMemo(() => key !== null && key !== void 0 ? key : `${Date.now() + Math.random()}`, [key]);\n\n  useEffect(() => {\n    setPortals(portals => [...portals, {\n      key: _key,\n      children\n    }]);\n    return () => {\n      setPortals(portals => portals.filter(p => p.key !== _key));\n    };\n  }, [_key, setPortals, children]);\n  return null;\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAAyDC,UAAzD,EAAqEC,SAArE,EAAgFC,OAAhF,EAAyFC,QAAzF,QAAyG,OAAzG;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,gBAAGP,aAAa,CAGhC,IAHgC,CAAnC;AAKP,OAAO,MAAMQ,gBAAgB,GAAG,MAAM;EACpC,MAAMC,MAAM,GAAGR,UAAU,CAACM,aAAD,CAAzB;;EACA,IAAI,CAACE,MAAL,EAAa;IACX,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;EACD;;EACD,OAAOD,MAAP;AALK;AAQP,OAAO,MAAME,cAAwB,GAAGC,QAAkB;EAAA,IAAjB;IAAEC;EAAF,IAAiBD;EACxD,MAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAgB,EAAhB,CAAtC;EAEA,oBAAOL,oBAACQ,aAAD,CAAeS,QAAf;IAAwBC,KAAK,EAAE;MAAEH,OAAF;MAAWC;IAAX;EAA/B,GAAyDF,QAAzD,CAAP;AAHK;AAMP,OAAO,MAAMK,MAAgB,GAAG,MAAM;EACpC,MAAM;IAAEJ;EAAF,IAAcN,gBAAgB,EAApC;EAEA,oBACET,oBAACA,KAAD,CAAOoB,QAAP,QACGL,OAAO,CAACM,GAARN,CAAYO;IAAA,IAAC;MAAEC,GAAF;MAAOT;IAAP,IAADQ;IAAA,oBACXtB,oBAACO,IAAD;MAAMgB,GAAG,EAAEA,GAAX;MAAgBC,aAAa,EAAC,UAA9B;MAAyCC,KAAK,EAAEnB,UAAU,CAACoB;IAA3D,GACGZ,QADH,CADW;EAAZ,EADH,CADF;AAHK;AAoBP,OAAO,MAAMa,MAA6B,GAAGC,SAAuB;EAAA,IAAtB;IAAEL,GAAF;IAAOT;EAAP,IAAsBc;EAClE,MAAM;IAAEZ;EAAF,IAAiBP,gBAAgB,EAAvC;;EAEA,MAAMoB,IAAI,GAAGzB,OAAO,CAAC,MAAMmB,GAAN,SAAMA,OAAN,WAAMA,SAAQ,GAAEO,IAAI,CAACC,GAALD,KAAaE,IAAI,CAACC,MAALD,EAAc,EAA5C,EAA+C,CAACT,GAAD,CAA/C,CAApB;;EAEApB,SAAS,CAAC,MAAM;IACda,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa;MAAEQ,GAAG,EAAEM,IAAP;MAAaf;IAAb,CAAb,CAAd,CAAVE;IAEA,OAAO,MAAM;MACXA,UAAU,CAAED,OAAD,IAAaA,OAAO,CAACmB,MAARnB,CAAgBoB,CAAD,IAAOA,CAAC,CAACZ,GAAFY,KAAUN,IAAhCd,CAAd,CAAVC;IADF;EAHO,GAMN,CAACa,IAAD,EAAOb,UAAP,EAAmBF,QAAnB,CANM,CAATX;EAQA,OAAO,IAAP;AAbK","names":["React","createContext","useContext","useEffect","useMemo","useState","StyleSheet","View","PortalContext","usePortalContext","portal","Error","PortalProvider","_ref","children","portals","setPortals","Provider","value","Outlet","Fragment","map","_ref2","key","pointerEvents","style","absoluteFill","Portal","_ref3","_key","Date","now","Math","random","filter","p"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/@react-native-material/core/lib/module/base/PortalContext.tsx"],"sourcesContent":["import React, { createContext, Dispatch, SetStateAction, useContext, useEffect, useMemo, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const PortalContext = createContext<{\n  portals: PortalProps[];\n  setPortals: Dispatch<SetStateAction<PortalProps[]>>;\n} | null>(null);\n\nexport const usePortalContext = () => {\n  const portal = useContext(PortalContext);\n  if (!portal) {\n    throw new Error('usePortalContext must be used within a PortalContext');\n  }\n  return portal;\n};\n\nexport const PortalProvider: React.FC = ({ children }) => {\n  const [portals, setPortals] = useState<PortalProps[]>([]);\n\n  return <PortalContext.Provider value={{ portals, setPortals }}>{children}</PortalContext.Provider>;\n};\n\nexport const Outlet: React.FC = () => {\n  const { portals } = usePortalContext();\n\n  return (\n    <React.Fragment>\n      {portals.map(({ key, children }) => (\n        <View key={key} pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n          {children}\n        </View>\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport interface PortalProps {\n  key?: React.Key;\n\n  children?: React.ReactNode;\n}\n\nexport const Portal: React.FC<PortalProps> = ({ key, children }) => {\n  const { setPortals } = usePortalContext();\n\n  const _key = useMemo(() => key ?? `${Date.now() + Math.random()}`, [key]);\n\n  useEffect(() => {\n    setPortals((portals) => [...portals, { key: _key, children }]);\n\n    return () => {\n      setPortals((portals) => portals.filter((p) => p.key !== _key));\n    };\n  }, [_key, setPortals, children]);\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}