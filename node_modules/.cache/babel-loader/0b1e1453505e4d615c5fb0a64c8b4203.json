{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated } from 'react-native';\nimport Text from './Text';\nimport { usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nconst Badge = _ref => {\n  let {\n    label,\n    showZero = false,\n    max = 99,\n    visible = true,\n    color = 'secondary',\n    tintColor,\n    style,\n    labelStyle,\n    children\n  } = _ref;\n  const palette = usePaletteColor(color, tintColor);\n  const styles = useStyles(() => ({\n    container: {\n      minWidth: 20,\n      height: 20,\n      justifyContent: 'center',\n      alignItems: 'center',\n      paddingHorizontal: 6,\n      backgroundColor: palette.main,\n      borderRadius: 10\n    }\n  }), [palette]);\n  const isVisible = useMemo(() => label === 0 ? visible && showZero : visible, [label, showZero, visible]);\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return /*#__PURE__*/React.createElement(Text, {\n          variant: \"body2\",\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, typeof label === 'number' && label > max ? `${max}+` : label);\n\n      case 'function':\n        return label({\n          color: palette.on\n        });\n\n      default:\n        return label;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, getLabel(), children);\n};\n\nexport default Badge;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,QAAT,QAA0D,cAA1D;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAgBC,eAAhB,QAAuC,2BAAvC;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAoBA,MAAMC,KAA2B,GAAGC,QAU9B;EAAA,IAV+B;IACnCC,KADmC;IAEnCC,QAAQ,GAAG,KAFwB;IAGnCC,GAAG,GAAG,EAH6B;IAInCC,OAAO,GAAG,IAJyB;IAKnCC,KAAK,GAAG,WAL2B;IAMnCC,SANmC;IAOnCC,KAPmC;IAQnCC,UARmC;IASnCC;EATmC,IAU/BT;EACJ,MAAMU,OAAO,GAAGb,eAAe,CAACQ,KAAD,EAAQC,SAAR,CAA/B;EAEA,MAAMK,MAAM,GAAGb,SAAS,CACtB,OAAO;IACLc,SAAS,EAAE;MACTC,QAAQ,EAAE,EADD;MAETC,MAAM,EAAE,EAFC;MAGTC,cAAc,EAAE,QAHP;MAITC,UAAU,EAAE,QAJH;MAKTC,iBAAiB,EAAE,CALV;MAMTC,eAAe,EAAER,OAAO,CAACS,IANhB;MAOTC,YAAY,EAAE;IAPL;EADN,CAAP,CADsB,EAYtB,CAACV,OAAD,CAZsB,CAAxB;EAeA,MAAMW,SAAS,GAAG5B,OAAO,CAAC,MAAOQ,KAAK,KAAK,CAAVA,GAAcG,OAAO,IAAIF,QAAzBD,GAAoCG,OAA5C,EAAsD,CAACH,KAAD,EAAQC,QAAR,EAAkBE,OAAlB,CAAtD,CAAzB;EAEA,MAAMkB,QAAQ,GAAG5B,MAAM,CAAC,IAAIC,QAAQ,CAAC4B,KAAb,CAAmBF,SAAS,GAAG,CAAH,GAAO,CAAnC,CAAD,CAAN3B,CAA8C8B,OAA/D;EAEAhC,SAAS,CAAC,MAAM;IACdG,QAAQ,CAAC8B,MAAT9B,CAAgB2B,QAAhB3B,EAA0B;MACxB+B,OAAO,EAAEL,SAAS,GAAG,CAAH,GAAO,CADD;MAExBM,QAAQ,EAAE,GAFc;MAGxBC,eAAe,EAAE;IAHO,CAA1BjC,EAIGkC,KAJHlC;EADO,GAMN,CAAC0B,SAAD,CANM,CAAT7B;;EAQA,MAAMsC,QAAQ,GAAG,MAAM;IACrB,QAAQ,OAAO7B,KAAf;MACE,KAAK,QAAL;MACA,KAAK,QAAL;QACE,oBACEV,oBAACK,IAAD;UAAMmC,OAAO,EAAC,OAAd;UAAsBxB,KAAK,EAAE,CAAC;YAAEF,KAAK,EAAEK,OAAO,CAACsB;UAAjB,CAAD,EAAwBxB,UAAxB;QAA7B,GACG,OAAOP,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAGE,GAArC,GAA4C,GAAEA,GAAI,GAAlD,GAAuDF,KAD1D,CADF;;MAKF,KAAK,UAAL;QACE,OAAOA,KAAK,CAAC;UAAEI,KAAK,EAAEK,OAAO,CAACsB;QAAjB,CAAD,CAAZ;;MACF;QACE,OAAO/B,KAAP;IAXJ;EADF;;EAgBA,oBACEV,oBAACI,QAAD,CAAUsC,IAAV;IAAe1B,KAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmB;MAAEsB,SAAS,EAAE,CAAC;QAAEC,KAAK,EAAEb;MAAT,CAAD;IAAb,CAAnB,EAAyDf,KAAzD;EAAtB,GACGuB,QAAQ,EADX,EAEGrB,QAFH,CADF;AAxDF;;AAgEA,eAAeV,KAAf","names":["React","useEffect","useMemo","useRef","Animated","Text","usePaletteColor","useStyles","Badge","_ref","label","showZero","max","visible","color","tintColor","style","labelStyle","children","palette","styles","container","minWidth","height","justifyContent","alignItems","paddingHorizontal","backgroundColor","main","borderRadius","isVisible","animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLabel","variant","on","View","transform","scale"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/Badge.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Animated, StyleProp, TextStyle, ViewProps } from 'react-native';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BadgeProps {\n  label?: number | string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  showZero?: boolean;\n\n  max?: number;\n\n  visible?: boolean;\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  style?: Animated.AnimatedProps<ViewProps>['style'];\n\n  labelStyle?: StyleProp<TextStyle>;\n}\n\nconst Badge: React.FC<BadgeProps> = ({\n  label,\n  showZero = false,\n  max = 99,\n  visible = true,\n  color = 'secondary',\n  tintColor,\n  style,\n  labelStyle,\n  children,\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        minWidth: 20,\n        height: 20,\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingHorizontal: 6,\n        backgroundColor: palette.main,\n        borderRadius: 10,\n      },\n    }),\n    [palette]\n  );\n\n  const isVisible = useMemo(() => (label === 0 ? visible && showZero : visible), [label, showZero, visible]);\n\n  const animated = useRef(new Animated.Value(isVisible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: isVisible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [isVisible]);\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'number':\n      case 'string':\n        return (\n          <Text variant=\"body2\" style={[{ color: palette.on }, labelStyle]}>\n            {typeof label === 'number' && label > max ? `${max}+` : label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  return (\n    <Animated.View style={[styles.container, { transform: [{ scale: animated }] }, style]}>\n      {getLabel()}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default Badge;\n"]},"metadata":{},"sourceType":"module"}