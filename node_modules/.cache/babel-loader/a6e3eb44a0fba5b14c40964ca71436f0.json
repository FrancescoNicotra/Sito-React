{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport Pressable from './Pressable';\nimport { usePaletteColor } from './hooks/use-palette-color';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nconst Button = _ref => {\n  let {\n    title,\n    leading,\n    trailing,\n    variant = 'contained',\n    color = 'primary',\n    tintColor,\n    compact = false,\n    disableElevation = false,\n    uppercase = true,\n    loading = false,\n    loadingIndicatorPosition = 'leading',\n    loadingIndicator,\n    style,\n    pressableContainerStyle,\n    contentContainerStyle,\n    titleStyle,\n    leadingContainerStyle,\n    trailingContainerStyle,\n    loadingOverlayContainerStyle,\n    pressEffect,\n    pressEffectColor,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    delayLongPress,\n    disabled,\n    hitSlop,\n    pressRetentionOffset,\n    android_disableSound,\n    android_ripple,\n    testOnly_pressed,\n    ...rest\n  } = _ref;\n  const surfaceScale = useSurfaceScale();\n  const p = usePaletteColor(disabled ? surfaceScale(0.12).hex() : color, disabled ? surfaceScale(0.35).hex() : tintColor);\n  const contentColor = useMemo(() => variant === 'contained' ? p.on : disabled ? p.on : p.main, [variant, p, disabled]);\n  const hasLeading = useMemo(() => !!leading || loading && loadingIndicatorPosition === 'leading', [leading, loading, loadingIndicatorPosition]);\n  const hasTrailing = useMemo(() => !!trailing || loading && loadingIndicatorPosition === 'trailing', [trailing, loading, loadingIndicatorPosition]);\n  const styles = useStyles(_ref2 => {\n    let {\n      shapes\n    } = _ref2;\n    return {\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent'\n      },\n      outline: { ...shapes.small,\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex()\n      },\n      pressableContainer: { ...shapes.small,\n        overflow: 'hidden'\n      },\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? compact ? 6 : 12 : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? compact ? 6 : 12 : compact ? 8 : 16\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      loadingOverlayContainer: { ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center'\n      }\n    };\n  }, [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]);\n\n  const getTitle = () => {\n    switch (typeof title) {\n      case 'string':\n        return /*#__PURE__*/React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: contentColor\n          }, styles.titleStyle, titleStyle]\n        }, title);\n\n      case 'function':\n        return title({\n          color: contentColor\n        });\n\n      default:\n        return title;\n    }\n  };\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return /*#__PURE__*/React.createElement(ActivityIndicator, {\n      color: contentColor\n    });\n\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return /*#__PURE__*/React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: contentColor\n          }\n        }, loadingIndicator);\n\n      case 'function':\n        return loadingIndicator({\n          color: contentColor\n        });\n\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getLeading = () => {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({\n      color: contentColor,\n      size: 18\n    }) : leading;\n  };\n\n  const getTrailing = () => {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({\n      color: contentColor,\n      size: 18\n    }) : trailing;\n  };\n\n  const [hovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(event => {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n    setHovered(true);\n  }, [onMouseEnter]);\n  const handleMouseLeave = useCallback(event => {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n    setHovered(false);\n  }, [onMouseLeave]);\n  const [pressed, setPressed] = useState(false);\n  const handlePressIn = useCallback(event => {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  const handlePressOut = useCallback(event => {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  const animatedElevation = useAnimatedElevation(variant === 'contained' && !disableElevation && !disabled ? pressed ? 8 : hovered ? 4 : 2 : 0);\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    category: \"small\",\n    style: [animatedElevation, styles.container, style]\n  }, rest), /*#__PURE__*/React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, /*#__PURE__*/React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : contentColor,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasLeading && /*#__PURE__*/React.createElement(View, {\n    style: [styles.leadingContainer, leadingContainerStyle]\n  }, getLeading()), getTitle(), hasTrailing && /*#__PURE__*/React.createElement(View, {\n    style: [styles.trailingContainer, trailingContainerStyle]\n  }, getTrailing()), loading && loadingIndicatorPosition === 'overlay' && /*#__PURE__*/React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))), variant === 'outlined' && /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.outline],\n    pointerEvents: \"none\"\n  }));\n};\n\nexport default Button;","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","useState","StyleSheet","View","Surface","Text","ActivityIndicator","Pressable","usePaletteColor","useSurfaceScale","useStyles","useAnimatedElevation","Button","_ref","title","leading","trailing","variant","color","tintColor","compact","disableElevation","uppercase","loading","loadingIndicatorPosition","loadingIndicator","style","pressableContainerStyle","contentContainerStyle","titleStyle","leadingContainerStyle","trailingContainerStyle","loadingOverlayContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","surfaceScale","p","hex","contentColor","on","main","hasLeading","hasTrailing","styles","_ref2","shapes","container","backgroundColor","outline","small","borderWidth","borderColor","pressableContainer","overflow","pressable","minWidth","height","flexDirection","justifyContent","alignItems","paddingStart","paddingEnd","textTransform","opacity","leadingContainer","marginEnd","trailingContainer","marginStart","loadingOverlayContainer","absoluteFillObject","getTitle","selectable","getLoadingIndicator","getLeading","size","getTrailing","hovered","setHovered","handleMouseEnter","event","handleMouseLeave","pressed","setPressed","handlePressIn","handlePressOut","animatedElevation","category","absoluteFill","pointerEvents"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/@react-native-material/core/lib/module/Button.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TargetedEvent,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface ButtonProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text content of the button.\n   */\n  title: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `title`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `title`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button.\n   * - `text`: Text buttons are typically used for less important actions (low emphasis).\n   * - `outlined`: Outlined buttons are used for more emphasis than text buttons due to the stroke (medium emphasis).\n   * - `contained`: Contained buttons have more emphasis, as they use a color fill and shadow (high emphasis).\n   *\n   * @default \"contained\"\n   */\n  variant?: 'text' | 'outlined' | 'contained';\n\n  /**\n   * The main color of the button.\n   * for `contained` buttons, this is the background color.\n   * for `outlined` and `text` buttons, this is the color of the content (text, icons, etc.).\n   *\n   * @default \"primary\"\n   */\n  color?: Color;\n\n  /**\n   * The color of the `contained` buttons content (text, icons, etc.). No effect on `outlined` and `text` buttons.\n   */\n  tintColor?: Color;\n\n  /**\n   * Smaller horizontal padding, useful for `text` buttons in a row.\n   *\n   * @default false\n   */\n  compact?: boolean;\n\n  /**\n   * If `true`, no shadow is used. No effect on `outlined` and `text` buttons.\n   *\n   * @default false\n   */\n  disableElevation?: boolean;\n\n  /**\n   * If `false`, the button title is not rendered in upper case. No effect if you pass a React.Node as the `title` prop.\n   *\n   * @default true\n   */\n  uppercase?: boolean;\n\n  /**\n   * Whether to show a loading indicator.\n   *\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * The place where the loading indicator should appear.\n   * - `leading`: The indicator will replace the `leading` element.\n   * - `trailing`: The indicator will replace the `trailing` element.\n   * - `overlay`: The indicator will be added as an overlay over the button.\n   *\n   * @default \"leading\"\n   */\n  loadingIndicatorPosition?: 'leading' | 'trailing' | 'overlay';\n\n  /**\n   * A React.Node to replace the default loading indicator. Also, you can pass a string to show a text (e.g. \"Loading...\").\n   */\n  loadingIndicator?: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button's pressable component container.\n   */\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the button's text. No effect if you pass a React.Node as the `title` prop.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the button's leading element container.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's trailing element container.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's loading indicator overlay view. No effect if `loadingIndicatorPosition` is not `overlay`.\n   */\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  leading,\n  trailing,\n  variant = 'contained',\n  color = 'primary',\n  tintColor,\n  compact = false,\n  disableElevation = false,\n  uppercase = true,\n  loading = false,\n  loadingIndicatorPosition = 'leading',\n  loadingIndicator,\n\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  titleStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n\n  ...rest\n}) => {\n  const surfaceScale = useSurfaceScale();\n\n  const p = usePaletteColor(\n    disabled ? surfaceScale(0.12).hex() : color,\n    disabled ? surfaceScale(0.35).hex() : tintColor\n  );\n\n  const contentColor = useMemo(\n    () => (variant === 'contained' ? p.on : disabled ? p.on : p.main),\n    [variant, p, disabled]\n  );\n\n  const hasLeading = useMemo(\n    () => !!leading || (loading && loadingIndicatorPosition === 'leading'),\n    [leading, loading, loadingIndicatorPosition]\n  );\n\n  const hasTrailing = useMemo(\n    () => !!trailing || (loading && loadingIndicatorPosition === 'trailing'),\n    [trailing, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    ({ shapes }) => ({\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent',\n      },\n      outline: {\n        ...shapes.small,\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex(),\n      },\n      pressableContainer: {\n        ...shapes.small,\n        overflow: 'hidden',\n      },\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? (compact ? 6 : 12) : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? (compact ? 6 : 12) : compact ? 8 : 16,\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }),\n    [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]\n  );\n\n  const getTitle = () => {\n    switch (typeof title) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: contentColor }, styles.titleStyle, titleStyle]}>\n            {title}\n          </Text>\n        );\n      case 'function':\n        return title({ color: contentColor });\n      default:\n        return title;\n    }\n  };\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={contentColor} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: contentColor }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: contentColor });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getLeading = () => {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({ color: contentColor, size: 18 }) : leading;\n  };\n\n  const getTrailing = () => {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({ color: contentColor, size: 18 }) : trailing;\n  };\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleMouseEnter = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseEnter?.(event);\n      setHovered(true);\n    },\n    [onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseLeave?.(event);\n      setHovered(false);\n    },\n    [onMouseLeave]\n  );\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(\n    variant === 'contained' && !disableElevation && !disabled ? (pressed ? 8 : hovered ? 4 : 2) : 0\n  );\n\n  return (\n    <Surface category=\"small\" style={[animatedElevation, styles.container, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? contentColor}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasLeading && <View style={[styles.leadingContainer, leadingContainerStyle]}>{getLeading()}</View>}\n          {getTitle()}\n          {hasTrailing && <View style={[styles.trailingContainer, trailingContainerStyle]}>{getTrailing()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n      {variant === 'outlined' && <View style={[StyleSheet.absoluteFill, styles.outline]} pointerEvents=\"none\" />}\n    </Surface>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}