{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext, useContext } from 'react';\nimport { usePaletteColor } from '../hooks/use-palette-color';\nexport const IconComponentContext = /*#__PURE__*/createContext(null);\nexport const useIconComponent = () => useContext(IconComponentContext);\nexport const IconComponentProvider = _ref => {\n  let {\n    IconComponent,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(IconComponentContext.Provider, {\n    value: IconComponent !== null && IconComponent !== void 0 ? IconComponent : null\n  }, children);\n};\nexport const Icon = _ref2 => {\n  let {\n    color = 'on-background',\n    ...rest\n  } = _ref2;\n  const IconComponent = useIconComponent();\n\n  if (!IconComponent) {\n    throw new Error('`IconComponent` is undefined. Seems like you forgot to wrap your component with `Provider`.');\n  }\n\n  const {\n    main\n  } = usePaletteColor(color);\n  return /*#__PURE__*/React.createElement(IconComponent, _extends({}, rest, {\n    color: main\n  }));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAAgBC,eAAhB,QAAuC,4BAAvC;AAQA,OAAO,MAAMC,oBAAoB,gBAAGH,aAAa,CAAuB,IAAvB,CAA1C;AAEP,OAAO,MAAMI,gBAAgB,GAAG,MAAMH,UAAU,CAACE,oBAAD,CAAzC;AAEP,OAAO,MAAME,qBAA2D,GAAGC,QAAiC;EAAA,IAAhC;IAAEC,aAAF;IAAiBC;EAAjB,IAAgCF;EAC1G,oBAAOP,oBAACI,oBAAD,CAAsBM,QAAtB;IAA+BC,KAAK,EAAEH,aAAF,SAAEA,iBAAF,WAAEA,mBAAiB;EAAvD,GAA8DC,QAA9D,CAAP;AADK;AAcP,OAAO,MAAMG,IAAyB,GAAGC,SAA0C;EAAA,IAAzC;IAAEC,KAAK,GAAG,eAAV;IAA2B,GAAGC;EAA9B,IAAyCF;EACjF,MAAML,aAAa,GAAGH,gBAAgB,EAAtC;;EACA,IAAI,CAACG,aAAL,EAAoB;IAClB,MAAM,IAAIQ,KAAJ,CAAU,6FAAV,CAAN;EACD;;EACD,MAAM;IAAEC;EAAF,IAAWd,eAAe,CAACW,KAAD,CAAhC;EACA,oBAAOd,oBAACQ,aAAD,eAAmBO,IAAnB;IAAyBD,KAAK,EAAEG;EAAhC,GAAP;AANK","names":["React","createContext","useContext","usePaletteColor","IconComponentContext","useIconComponent","IconComponentProvider","_ref","IconComponent","children","Provider","value","Icon","_ref2","color","rest","Error","main"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/base/IconComponentContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { Color, usePaletteColor } from '../hooks/use-palette-color';\n\nexport type IconComponent = React.ComponentType<IconProps>;\n\nexport interface IconComponentProviderProps {\n  IconComponent?: IconComponent | null;\n}\n\nexport const IconComponentContext = createContext<IconComponent | null>(null);\n\nexport const useIconComponent = () => useContext(IconComponentContext);\n\nexport const IconComponentProvider: React.FC<IconComponentProviderProps> = ({ IconComponent, children }) => {\n  return <IconComponentContext.Provider value={IconComponent ?? null}>{children}</IconComponentContext.Provider>;\n};\n\nexport interface IconProps {\n  name: string;\n\n  size?: number;\n\n  color?: Color;\n\n  [key: string]: any;\n}\n\nexport const Icon: React.FC<IconProps> = ({ color = 'on-background', ...rest }) => {\n  const IconComponent = useIconComponent();\n  if (!IconComponent) {\n    throw new Error('`IconComponent` is undefined. Seems like you forgot to wrap your component with `Provider`.');\n  }\n  const { main } = usePaletteColor(color);\n  return <IconComponent {...rest} color={main} />;\n};\n"]},"metadata":{},"sourceType":"module"}