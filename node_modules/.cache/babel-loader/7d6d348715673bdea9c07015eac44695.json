{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Surface from './Surface';\nimport Pressable from './Pressable';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport { usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nconst FAB = _ref => {\n  let {\n    icon,\n    label,\n    variant = 'standard',\n    size = 'default',\n    color = 'secondary',\n    tintColor,\n    loading = false,\n    loadingIndicator,\n    loadingIndicatorPosition = 'icon',\n    visible = true,\n    style,\n    pressableContainerStyle,\n    contentContainerStyle,\n    iconContainerStyle,\n    labelContainerStyle,\n    labelStyle,\n    loadingOverlayContainerStyle,\n    pressEffect,\n    pressEffectColor,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    delayLongPress,\n    disabled,\n    hitSlop,\n    pressRetentionOffset,\n    android_disableSound,\n    android_ripple,\n    testOnly_pressed,\n    ...rest\n  } = _ref;\n  const palette = usePaletteColor(color, tintColor);\n  const hasIcon = useMemo(() => icon || loading && loadingIndicatorPosition === 'icon', [icon, loading, loadingIndicatorPosition]);\n  const styles = useStyles(() => ({\n    container: {\n      backgroundColor: palette.main,\n      borderRadius: size === 'default' ? 28 : 20\n    },\n    pressableContainer: {\n      borderRadius: size === 'default' ? 28 : 20,\n      overflow: 'hidden'\n    },\n    pressable: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingStart: variant === 'extended' ? hasIcon ? size === 'default' ? 12 : 6 : size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n      paddingEnd: variant === 'extended' ? size === 'default' ? 20 : 10 : size === 'default' ? 16 : 8,\n      paddingVertical: size === 'default' ? 16 : 8\n    },\n    iconContainer: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: 24,\n      height: 24\n    },\n    labelContainer: {\n      marginStart: hasIcon ? size === 'default' ? 12 : 6 : 0\n    },\n    loadingOverlayContainer: { ...StyleSheet.absoluteFillObject,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: palette.main\n    }\n  }), [variant, size, palette, hasIcon]);\n  const animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  }, [visible]);\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return /*#__PURE__*/React.createElement(ActivityIndicator, {\n      color: palette.on\n    });\n\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return /*#__PURE__*/React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: palette.on\n          }\n        }, loadingIndicator);\n\n      case 'function':\n        return loadingIndicator({\n          color: palette.on\n        });\n\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getIcon = () => {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({\n      color: palette.on,\n      size: 24\n    }) : icon;\n  };\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'string':\n        return /*#__PURE__*/React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: palette.on\n          }, labelStyle]\n        }, label);\n\n      case 'function':\n        return label({\n          color: palette.on\n        });\n\n      default:\n        return label;\n    }\n  };\n\n  const [pressed, setPressed] = useState(false);\n  const handlePressIn = useCallback(event => {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  const handlePressOut = useCallback(event => {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  const animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [animatedElevation, styles.container, {\n      transform: [{\n        scale: animated\n      }]\n    }, style]\n  }, rest), /*#__PURE__*/React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, /*#__PURE__*/React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.on,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasIcon && /*#__PURE__*/React.createElement(View, {\n    style: [styles.iconContainer, iconContainerStyle]\n  }, getIcon()), variant === 'extended' && /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, labelContainerStyle]\n  }, getLabel()), loading && loadingIndicatorPosition === 'overlay' && /*#__PURE__*/React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))));\n};\n\nexport default FAB;","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","Animated","StyleSheet","View","Surface","Pressable","Text","ActivityIndicator","usePaletteColor","useStyles","useAnimatedElevation","FAB","_ref","icon","label","variant","size","color","tintColor","loading","loadingIndicator","loadingIndicatorPosition","visible","style","pressableContainerStyle","contentContainerStyle","iconContainerStyle","labelContainerStyle","labelStyle","loadingOverlayContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","hasIcon","styles","container","backgroundColor","main","borderRadius","pressableContainer","overflow","pressable","flexDirection","alignItems","paddingStart","paddingEnd","paddingVertical","iconContainer","justifyContent","width","height","labelContainer","marginStart","loadingOverlayContainer","absoluteFillObject","animated","Value","current","timing","toValue","duration","useNativeDriver","start","getLoadingIndicator","on","getIcon","getLabel","selectable","pressed","setPressed","handlePressIn","event","handlePressOut","animatedElevation","transform","scale"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/@react-native-material/core/lib/module/FAB.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Animated, GestureResponderEvent, StyleProp, StyleSheet, TextStyle, View, ViewStyle } from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface FABProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  icon?: React.ReactElement | ((props: { color: string; size: number }) => React.ReactElement | null) | null;\n\n  label?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  variant?: 'standard' | 'extended';\n\n  size?: 'default' | 'mini';\n\n  color?: Color;\n\n  tintColor?: Color;\n\n  loading?: boolean;\n\n  loadingIndicator?: string | React.ReactElement | ((props: { color: string }) => React.ReactElement | null) | null;\n\n  loadingIndicatorPosition?: 'icon' | 'overlay';\n\n  visible?: boolean;\n\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  contentContainerStyle?: PressableProps['style'];\n\n  iconContainerStyle?: StyleProp<ViewStyle>;\n\n  labelContainerStyle?: StyleProp<ViewStyle>;\n\n  labelStyle?: StyleProp<TextStyle>;\n\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst FAB: React.FC<FABProps> = ({\n  icon,\n  label,\n  variant = 'standard',\n  size = 'default',\n  color = 'secondary',\n  tintColor,\n  loading = false,\n  loadingIndicator,\n  loadingIndicatorPosition = 'icon',\n  visible = true,\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  iconContainerStyle,\n  labelContainerStyle,\n  labelStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color, tintColor);\n\n  const hasIcon = useMemo(\n    () => icon || (loading && loadingIndicatorPosition === 'icon'),\n    [icon, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    () => ({\n      container: {\n        backgroundColor: palette.main,\n        borderRadius: size === 'default' ? 28 : 20,\n      },\n      pressableContainer: {\n        borderRadius: size === 'default' ? 28 : 20,\n        overflow: 'hidden',\n      },\n      pressable: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingStart:\n          variant === 'extended'\n            ? hasIcon\n              ? size === 'default'\n                ? 12\n                : 6\n              : size === 'default'\n              ? 20\n              : 10\n            : size === 'default'\n            ? 16\n            : 8,\n        paddingEnd: variant === 'extended' ? (size === 'default' ? 20 : 10) : size === 'default' ? 16 : 8,\n        paddingVertical: size === 'default' ? 16 : 8,\n      },\n      iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 24,\n        height: 24,\n      },\n      labelContainer: {\n        marginStart: hasIcon ? (size === 'default' ? 12 : 6) : 0,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: palette.main,\n      },\n    }),\n    [variant, size, palette, hasIcon]\n  );\n\n  const animated = useRef(new Animated.Value(visible ? 1 : 0)).current;\n\n  useEffect(() => {\n    Animated.timing(animated, {\n      toValue: visible ? 1 : 0,\n      duration: 200,\n      useNativeDriver: false,\n    }).start();\n  }, [visible]);\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={palette.on} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: palette.on }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: palette.on });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getIcon = () => {\n    if (loading && loadingIndicatorPosition === 'icon') return getLoadingIndicator();\n    return typeof icon === 'function' ? icon({ color: palette.on, size: 24 }) : icon;\n  };\n\n  const getLabel = () => {\n    switch (typeof label) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: palette.on }, labelStyle]}>\n            {label}\n          </Text>\n        );\n      case 'function':\n        return label({ color: palette.on });\n      default:\n        return label;\n    }\n  };\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(pressed ? 12 : 6);\n\n  return (\n    <Surface style={[animatedElevation, styles.container, { transform: [{ scale: animated }] }, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? palette.on}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasIcon && <View style={[styles.iconContainer, iconContainerStyle]}>{getIcon()}</View>}\n          {variant === 'extended' && <View style={[styles.labelContainer, labelContainerStyle]}>{getLabel()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n    </Surface>\n  );\n};\n\nexport default FAB;\n"]},"metadata":{},"sourceType":"module"}