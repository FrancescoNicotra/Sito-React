{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport chroma from 'chroma-js';\nimport Pressable from './Pressable';\nimport Text from './Text';\nimport { usePaletteColor } from './hooks/use-palette-color';\nimport { useTheme } from './base/ThemeContext';\n\nconst Chip = _ref => {\n  let {\n    label,\n    leading,\n    trailing,\n    variant = 'filled',\n    color = 'on-surface',\n    style,\n    contentContainerStyle,\n    labelStyle,\n    leadingContainerStyle,\n    trailingContainerStyle,\n    children,\n    pressEffect,\n    pressEffectColor,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    delayLongPress,\n    disabled,\n    hitSlop,\n    pressRetentionOffset,\n    android_disableSound,\n    android_ripple,\n    testOnly_pressed,\n    ...rest\n  } = _ref;\n  const theme = useTheme();\n  const palette = usePaletteColor(color, theme.palette.surface.main);\n  const scale = useMemo(() => chroma.scale([palette.on, palette.main]), [palette]);\n  const labelElement = typeof label === 'string' ? /*#__PURE__*/React.createElement(Text, {\n    variant: \"body2\",\n    style: [{\n      color: scale(0.87).hex()\n    }, labelStyle]\n  }, label) : typeof label === 'function' ? label({\n    color: scale(0.87).hex()\n  }) : label;\n  const leadingElement = typeof leading === 'function' ? leading({\n    color: scale(0.66).hex(),\n    size: 24\n  }) : leading;\n  const trailingElement = typeof trailing === 'function' ? trailing({\n    color: scale(0.66).hex(),\n    size: 18\n  }) : trailing;\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [styles.container, variant === 'filled' && {\n      backgroundColor: scale(0.08).hex()\n    }, style]\n  }, rest), /*#__PURE__*/React.createElement(Pressable, {\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : scale(0.87).hex(),\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed,\n    style: [styles.contentContainer, contentContainerStyle]\n  }, leadingElement && /*#__PURE__*/React.createElement(View, {\n    style: [styles.leadingContainer, leadingContainerStyle]\n  }, leadingElement), labelElement, children, trailingElement && /*#__PURE__*/React.createElement(View, {\n    style: [styles.trailingContainer, trailingContainerStyle]\n  }, trailingElement), variant === 'outlined' && /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.outline, {\n      borderColor: scale(0.26).hex()\n    }]\n  })));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    overflow: 'hidden'\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    height: 32\n  },\n  leadingContainer: {\n    marginStart: -8,\n    marginEnd: 8\n  },\n  trailingContainer: {\n    marginStart: 8,\n    marginEnd: -4\n  },\n  outline: {\n    borderWidth: 1,\n    borderRadius: 16\n  }\n});\nexport default Chip;","map":{"version":3,"mappings":"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","names":["React","useMemo","StyleSheet","View","chroma","Pressable","Text","usePaletteColor","useTheme","Chip","_ref","label","leading","trailing","variant","color","style","contentContainerStyle","labelStyle","leadingContainerStyle","trailingContainerStyle","children","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","theme","palette","surface","main","scale","on","labelElement","hex","leadingElement","size","trailingElement","styles","container","backgroundColor","contentContainer","leadingContainer","trailingContainer","absoluteFill","outline","borderColor","create","borderRadius","overflow","flexDirection","alignItems","paddingHorizontal","height","marginStart","marginEnd","borderWidth"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/Chip.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, StyleSheet, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\nimport chroma from 'chroma-js';\nimport Pressable, { PressableProps } from './Pressable';\nimport Text from './Text';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useTheme } from './base/ThemeContext';\n\nexport interface ChipProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text to display in the chip.\n   */\n  label: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `label`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `label`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The variant of the chip.\n   * - `filled`: A filled chip.\n   * - `outlined`: A solid background with a border.\n   *\n   * @default \"filled\"\n   */\n  variant?: 'filled' | 'outlined';\n\n  /**\n   * The color of the chip.\n   */\n  color?: Color;\n\n  /**\n   * The style of the chip's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the chip's label.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the chip's leading element.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the chip's trailing element.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Chip: React.FC<ChipProps> = ({\n  label,\n  leading,\n  trailing,\n  variant = 'filled',\n  color = 'on-surface',\n  style,\n  contentContainerStyle,\n  labelStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  children,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const theme = useTheme();\n\n  const palette = usePaletteColor(color, theme.palette.surface.main);\n\n  const scale = useMemo(() => chroma.scale([palette.on, palette.main]), [palette]);\n\n  const labelElement =\n    typeof label === 'string' ? (\n      <Text variant=\"body2\" style={[{ color: scale(0.87).hex() }, labelStyle]}>\n        {label}\n      </Text>\n    ) : typeof label === 'function' ? (\n      label({ color: scale(0.87).hex() })\n    ) : (\n      label\n    );\n\n  const leadingElement = typeof leading === 'function' ? leading({ color: scale(0.66).hex(), size: 24 }) : leading;\n\n  const trailingElement = typeof trailing === 'function' ? trailing({ color: scale(0.66).hex(), size: 18 }) : trailing;\n\n  return (\n    <View style={[styles.container, variant === 'filled' && { backgroundColor: scale(0.08).hex() }, style]} {...rest}>\n      <Pressable\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? scale(0.87).hex()}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n        style={[styles.contentContainer, contentContainerStyle]}\n      >\n        {leadingElement && <View style={[styles.leadingContainer, leadingContainerStyle]}>{leadingElement}</View>}\n        {labelElement}\n        {children}\n        {trailingElement && <View style={[styles.trailingContainer, trailingContainerStyle]}>{trailingElement}</View>}\n\n        {variant === 'outlined' && (\n          <View style={[StyleSheet.absoluteFill, styles.outline, { borderColor: scale(0.26).hex() }]} />\n        )}\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 16,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 12,\n    height: 32,\n  },\n  leadingContainer: {\n    marginStart: -8,\n    marginEnd: 8,\n  },\n  trailingContainer: {\n    marginStart: 8,\n    marginEnd: -4,\n  },\n  outline: {\n    borderWidth: 1,\n    borderRadius: 16,\n  },\n});\n\nexport default Chip;\n"]},"metadata":{},"sourceType":"module"}