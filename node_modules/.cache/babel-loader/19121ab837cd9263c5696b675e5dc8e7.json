{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Pressable from './Pressable';\nimport { usePaletteColor } from './hooks/use-palette-color';\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden'\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst IconButton = _ref => {\n  let {\n    icon,\n    color = 'on-background',\n    style,\n    contentContainerStyle,\n    pressEffect,\n    pressEffectColor,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    onBlur,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    delayLongPress,\n    disabled,\n    hitSlop,\n    pressRetentionOffset,\n    android_disableSound,\n    android_ripple,\n    testOnly_pressed,\n    ...rest\n  } = _ref;\n  const palette = usePaletteColor(color);\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), /*#__PURE__*/React.createElement(Pressable, {\n    style: [StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.main,\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, icon ? typeof icon === 'function' ? icon({\n    color: palette.main,\n    size: 24\n  }) : icon : null));\n};\n\nexport default IconButton;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAA4C,cAA5C;AACA,OAAOC,SAAP,MAA0C,aAA1C;AACA,SAAgBC,eAAhB,QAAuC,2BAAvC;AAqBA,MAAMC,MAAM,GAAGJ,UAAU,CAACK,MAAXL,CAAkB;EAC/BM,SAAS,EAAE;IACTC,KAAK,EAAE,EADE;IAETC,MAAM,EAAE,EAFC;IAGTC,YAAY,EAAE,KAAK,CAHV;IAITC,QAAQ,EAAE;EAJD,CADoB;EAO/BC,gBAAgB,EAAE;IAChBC,cAAc,EAAE,QADA;IAEhBC,UAAU,EAAE;EAFI;AAPa,CAAlBb,CAAf;;AAaA,MAAMc,UAAqC,GAAGC,QAwBxC;EAAA,IAxByC;IAC7CC,IAD6C;IAE7CC,KAAK,GAAG,eAFqC;IAG7CC,KAH6C;IAI7CC,qBAJ6C;IAM7CC,WAN6C;IAO7CC,gBAP6C;IAQ7CC,OAR6C;IAS7CC,SAT6C;IAU7CC,UAV6C;IAW7CC,WAX6C;IAY7CC,MAZ6C;IAa7CC,OAb6C;IAc7CC,YAd6C;IAe7CC,YAf6C;IAgB7CC,cAhB6C;IAiB7CC,QAjB6C;IAkB7CC,OAlB6C;IAmB7CC,oBAnB6C;IAoB7CC,oBApB6C;IAqB7CC,cArB6C;IAsB7CC,gBAtB6C;IAuB7C,GAAGC;EAvB0C,IAwBzCtB;EACJ,MAAMuB,OAAO,GAAGnC,eAAe,CAACc,KAAD,CAA/B;EACA,oBACElB,oBAACE,IAAD;IAAMiB,KAAK,EAAE,CAACd,MAAM,CAACE,SAAR,EAAmBY,KAAnB;EAAb,GAA4CmB,IAA5C,gBACEtC,oBAACG,SAAD;IACEgB,KAAK,EAAE,CAAClB,UAAU,CAACuC,YAAZ,EAA0BnC,MAAM,CAACO,gBAAjC,EAAmDQ,qBAAnD,CADT;IAEEC,WAAW,EAAEA,WAFf;IAGEC,gBAAgB,EAAEA,gBAAF,SAAEA,oBAAF,WAAEA,sBAAoBiB,OAAO,CAACE,IAHhD;IAIElB,OAAO,EAAEA,OAJX;IAKEC,SAAS,EAAEA,SALb;IAMEC,UAAU,EAAEA,UANd;IAOEC,WAAW,EAAEA,WAPf;IAQEC,MAAM,EAAEA,MARV;IASEC,OAAO,EAAEA,OATX;IAUEC,YAAY,EAAEA,YAVhB;IAWEC,YAAY,EAAEA,YAXhB;IAYEC,cAAc,EAAEA,cAZlB;IAaEC,QAAQ,EAAEA,QAbZ;IAcEC,OAAO,EAAEA,OAdX;IAeEC,oBAAoB,EAAEA,oBAfxB;IAgBEC,oBAAoB,EAAEA,oBAhBxB;IAiBEC,cAAc,EAAEA,cAjBlB;IAkBEC,gBAAgB,EAAEA;EAlBpB,GAoBGpB,IAAI,GAAI,OAAOA,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAAC;IAAEC,KAAK,EAAEqB,OAAO,CAACE,IAAjB;IAAuBC,IAAI,EAAE;EAA7B,CAAD,CAAjC,GAAuEzB,IAA3E,GAAmF,IApB1F,CADF,CADF;AA1BF;;AAsDA,eAAeF,UAAf","names":["React","StyleSheet","View","Pressable","usePaletteColor","styles","create","container","width","height","borderRadius","overflow","contentContainer","justifyContent","alignItems","IconButton","_ref","icon","color","style","contentContainerStyle","pressEffect","pressEffectColor","onPress","onPressIn","onPressOut","onLongPress","onBlur","onFocus","onMouseEnter","onMouseLeave","delayLongPress","disabled","hitSlop","pressRetentionOffset","android_disableSound","android_ripple","testOnly_pressed","rest","palette","absoluteFill","main","size"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/@react-native-material/core/lib/module/IconButton.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface IconButtonProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The element to render as the icon.\n   */\n  icon?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The color of the icon and the press effect.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n\n  /**\n   * The style of the icon's container view.\n   */\n  contentContainerStyle?: PressableProps['style'];\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst IconButton: React.FC<IconButtonProps> = ({\n  icon,\n  color = 'on-background',\n  style,\n  contentContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color);\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      <Pressable\n        style={[StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle]}\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? palette.main}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n      >\n        {icon ? (typeof icon === 'function' ? icon({ color: palette.main, size: 24 }) : icon) : null}\n      </Pressable>\n    </View>\n  );\n};\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}