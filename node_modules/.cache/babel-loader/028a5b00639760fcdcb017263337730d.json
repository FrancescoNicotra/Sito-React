{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport Box from './Box';\n\nconst Divider = _ref => {\n  let {\n    orientation = 'horizontal',\n    thickness = 1,\n    color = '#E0E0E0',\n    style,\n    ...rest\n  } = _ref;\n  const dividerStyle = useMemo(() => {\n    if (orientation === 'horizontal') return {\n      height: thickness,\n      backgroundColor: color\n    };else return {\n      width: thickness,\n      backgroundColor: color\n    };\n  }, [orientation, thickness, color]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    style: [dividerStyle, style]\n  }, rest));\n};\n\nexport default Divider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,GAAP,MAAgB,OAAhB;;AAyBA,MAAMC,OAA+B,GAAGC,QAMlC;EAAA,IANmC;IACvCC,WAAW,GAAG,YADyB;IAEvCC,SAAS,GAAG,CAF2B;IAGvCC,KAAK,GAAG,SAH+B;IAIvCC,KAJuC;IAKvC,GAAGC;EALoC,IAMnCL;EACJ,MAAMM,YAAY,GAAGT,OAAO,CAAC,MAAM;IACjC,IAAII,WAAW,KAAK,YAApB,EACE,OAAO;MAAEM,MAAM,EAAEL,SAAV;MAAqBM,eAAe,EAAEL;IAAtC,CAAP,CADF,KAEK,OAAO;MAAEM,KAAK,EAAEP,SAAT;MAAoBM,eAAe,EAAEL;IAArC,CAAP;EAHqB,GAIzB,CAACF,WAAD,EAAcC,SAAd,EAAyBC,KAAzB,CAJyB,CAA5B;EAMA,oBAAOP,oBAACE,GAAD;IAAKM,KAAK,EAAE,CAACE,YAAD,EAAeF,KAAf;EAAZ,GAAuCC,IAAvC,EAAP;AAbF;;AAgBA,eAAeN,OAAf","names":["React","useMemo","Box","Divider","_ref","orientation","thickness","color","style","rest","dividerStyle","height","backgroundColor","width"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/react-native-flex-layout/lib/module/Divider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface DividerProps extends BoxProps {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n\n  /**\n   * The thickness of the divider.\n   *\n   * @default 1\n   */\n  thickness?: number;\n\n  /**\n   * The color of the divider.\n   *\n   * @default '#E0E0E0'\n   */\n  color?: string;\n}\n\nconst Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  thickness = 1,\n  color = '#E0E0E0',\n  style,\n  ...rest\n}) => {\n  const dividerStyle = useMemo(() => {\n    if (orientation === 'horizontal')\n      return { height: thickness, backgroundColor: color };\n    else return { width: thickness, backgroundColor: color };\n  }, [orientation, thickness, color]);\n\n  return <Box style={[dividerStyle, style]} {...rest} />;\n};\n\nexport default Divider;\n"]},"metadata":{},"sourceType":"module"}