{"ast":null,"code":"import React, { createContext, useContext, useMemo } from 'react';\nimport { useWindowDimensions } from 'react-native';\nexport const defaultWindowSizes = {\n  base: 0,\n  sm: 600,\n  md: 905,\n  lg: 1240,\n  xl: 1440\n};\nexport const WindowSizeClassContext = /*#__PURE__*/createContext('base');\nexport const useWindowSizeClass = () => useContext(WindowSizeClassContext);\nexport const WindowSizeClassProvider = _ref => {\n  let {\n    windowSizes = defaultWindowSizes,\n    children\n  } = _ref;\n  const {\n    width\n  } = useWindowDimensions();\n  const windowSizeClass = useMemo(() => {\n    if (width >= windowSizes.base && width < windowSizes.sm) return 'base';\n    if (width >= windowSizes.sm && width < windowSizes.md) return 'sm';\n    if (width >= windowSizes.md && width < windowSizes.lg) return 'md';\n    if (width >= windowSizes.lg && width < windowSizes.xl) return 'lg';\n    return 'xl';\n  }, [width, windowSizes]);\n  return /*#__PURE__*/React.createElement(WindowSizeClassContext.Provider, {\n    value: windowSizeClass\n  }, children);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,SAASC,mBAAT,QAAoC,cAApC;AAMA,OAAO,MAAMC,kBAA+B,GAAG;EAAEC,IAAI,EAAE,CAAR;EAAWC,EAAE,EAAE,GAAf;EAAoBC,EAAE,EAAE,GAAxB;EAA6BC,EAAE,EAAE,IAAjC;EAAuCC,EAAE,EAAE;AAA3C,CAAxC;AAMP,OAAO,MAAMC,sBAAsB,gBAAGV,aAAa,CAAkB,MAAlB,CAA5C;AAEP,OAAO,MAAMW,kBAAkB,GAAG,MAAMV,UAAU,CAACS,sBAAD,CAA3C;AAEP,OAAO,MAAME,uBAA+D,GAAGC,QAGzE;EAAA,IAH0E;IAC9EC,WAAW,GAAGV,kBADgE;IAE9EW;EAF8E,IAG1EF;EACJ,MAAM;IAAEG;EAAF,IAAYb,mBAAmB,EAArC;EAEA,MAAMc,eAAgC,GAAGf,OAAO,CAAC,MAAM;IACrD,IAAIc,KAAK,IAAIF,WAAW,CAACT,IAArBW,IAA6BA,KAAK,GAAGF,WAAW,CAACR,EAArD,EAAyD,OAAO,MAAP;IACzD,IAAIU,KAAK,IAAIF,WAAW,CAACR,EAArBU,IAA2BA,KAAK,GAAGF,WAAW,CAACP,EAAnD,EAAuD,OAAO,IAAP;IACvD,IAAIS,KAAK,IAAIF,WAAW,CAACP,EAArBS,IAA2BA,KAAK,GAAGF,WAAW,CAACN,EAAnD,EAAuD,OAAO,IAAP;IACvD,IAAIQ,KAAK,IAAIF,WAAW,CAACN,EAArBQ,IAA2BA,KAAK,GAAGF,WAAW,CAACL,EAAnD,EAAuD,OAAO,IAAP;IACvD,OAAO,IAAP;EAL8C,GAM7C,CAACO,KAAD,EAAQF,WAAR,CAN6C,CAAhD;EAQA,oBAAOf,oBAACW,sBAAD,CAAwBQ,QAAxB;IAAiCC,KAAK,EAAEF;EAAxC,GAA0DF,QAA1D,CAAP;AAdK","names":["React","createContext","useContext","useMemo","useWindowDimensions","defaultWindowSizes","base","sm","md","lg","xl","WindowSizeClassContext","useWindowSizeClass","WindowSizeClassProvider","_ref","windowSizes","children","width","windowSizeClass","Provider","value"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/base/WindowSizeClassContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { useWindowDimensions } from 'react-native';\n\nexport type WindowSizeClass = 'base' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport type WindowSizes = Record<WindowSizeClass, number>;\n\nexport const defaultWindowSizes: WindowSizes = { base: 0, sm: 600, md: 905, lg: 1240, xl: 1440 };\n\nexport interface WindowSizeClassProviderProps {\n  windowSizes?: WindowSizes;\n}\n\nexport const WindowSizeClassContext = createContext<WindowSizeClass>('base');\n\nexport const useWindowSizeClass = () => useContext(WindowSizeClassContext);\n\nexport const WindowSizeClassProvider: React.FC<WindowSizeClassProviderProps> = ({\n  windowSizes = defaultWindowSizes,\n  children,\n}) => {\n  const { width } = useWindowDimensions();\n\n  const windowSizeClass: WindowSizeClass = useMemo(() => {\n    if (width >= windowSizes.base && width < windowSizes.sm) return 'base';\n    if (width >= windowSizes.sm && width < windowSizes.md) return 'sm';\n    if (width >= windowSizes.md && width < windowSizes.lg) return 'md';\n    if (width >= windowSizes.lg && width < windowSizes.xl) return 'lg';\n    return 'xl';\n  }, [width, windowSizes]);\n\n  return <WindowSizeClassContext.Provider value={windowSizeClass}>{children}</WindowSizeClassContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}