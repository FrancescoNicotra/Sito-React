{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport { View } from 'react-native';\nimport Flex from './Flex';\nimport Selector, { notLastChild } from './Selector';\nimport Divider from './Divider';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nconst Stack = _ref => {\n  let {\n    spacing = 0,\n    divider = false,\n    dividerStyle,\n    shouldWrapChildren = false,\n    childrenStyle,\n    children,\n    ...rest\n  } = _ref;\n  const spacingValue = useSpacing(spacing);\n  const direction = useMemo(() => {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n  const spacingStyle = useMemo(() => {\n    switch (direction) {\n      case 'column':\n        return {\n          marginBottom: spacingValue\n        };\n\n      case 'row':\n        return {\n          marginEnd: spacingValue\n        };\n\n      case 'column-reverse':\n        return {\n          marginTop: spacingValue\n        };\n\n      case 'row-reverse':\n        return {\n          marginStart: spacingValue\n        };\n    }\n  }, [spacingValue, direction]);\n  const shouldUseChildren = !shouldWrapChildren && !divider;\n  const validChildren = getValidChildren(children);\n  const clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n    const key = typeof child.key !== 'undefined' ? child.key : index;\n    const isLast = index + 1 === validChildren.length;\n    const wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: key\n    }, child);\n\n    const _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!divider) return _child;\n    const dividerElement = /*#__PURE__*/React.isValidElement(divider) ? divider : /*#__PURE__*/React.createElement(Divider, {\n      orientation: direction === 'row' || direction === 'row-reverse' ? 'vertical' : 'horizontal'\n    });\n    const clonedDivider = /*#__PURE__*/React.cloneElement(dividerElement, {\n      key: `${key}-divider`,\n      style: [dividerElement.props.style, dividerStyle]\n    });\n\n    const _divider = isLast ? null : clonedDivider;\n\n    return [_child, _divider];\n  });\n  return /*#__PURE__*/React.createElement(Flex, rest, /*#__PURE__*/React.createElement(Selector, {\n    childrenStyle: [notLastChild(spacingStyle), childrenStyle]\n  }, clones));\n};\n\nexport default Stack;\n\nconst StackItem = props => /*#__PURE__*/React.createElement(View, props);\n\nexport const HStack = _ref2 => {\n  let {\n    reverse,\n    ...rest\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'row-reverse' : 'row'\n  }));\n};\nexport const VStack = _ref3 => {\n  let {\n    reverse,\n    ...rest\n  } = _ref3;\n  return /*#__PURE__*/React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'column-reverse' : 'column'\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","useMemo","View","Flex","Selector","notLastChild","Divider","useSpacing","getValidChildren","Stack","_ref","spacing","divider","dividerStyle","shouldWrapChildren","childrenStyle","children","rest","spacingValue","direction","inline","spacingStyle","marginBottom","marginEnd","marginTop","marginStart","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","StackItem","_child","dividerElement","isValidElement","orientation","clonedDivider","cloneElement","style","props","_divider","HStack","_ref2","reverse","VStack","_ref3"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/react-native-flex-layout/lib/module/Stack.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector, { notLastChild } from './Selector';\nimport Divider from './Divider';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface StackProps extends FlexProps, SelectorProps {\n  /**\n   * The spacing between items in the stack.\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, each stack item will show a divider.\n   *\n   * @default false\n   */\n  divider?: React.ReactElement;\n\n  /**\n   * A style object to apply to each divider.\n   */\n  dividerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Stack: React.FC<StackProps> = ({\n  spacing = 0,\n  divider = false,\n  dividerStyle,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const direction = useMemo(() => {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n\n  const spacingStyle = useMemo(() => {\n    switch (direction) {\n      case 'column':\n        return { marginBottom: spacingValue };\n      case 'row':\n        return { marginEnd: spacingValue };\n      case 'column-reverse':\n        return { marginTop: spacingValue };\n      case 'row-reverse':\n        return { marginStart: spacingValue };\n    }\n  }, [spacingValue, direction]);\n\n  const shouldUseChildren = !shouldWrapChildren && !divider;\n\n  const validChildren = getValidChildren(children);\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        const isLast = index + 1 === validChildren.length;\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>;\n        const _child = shouldWrapChildren ? wrappedChild : child;\n\n        if (!divider) return _child;\n\n        const dividerElement = React.isValidElement(divider) ? (\n          divider\n        ) : (\n          <Divider\n            orientation={\n              direction === 'row' || direction === 'row-reverse'\n                ? 'vertical'\n                : 'horizontal'\n            }\n          />\n        );\n\n        const clonedDivider = React.cloneElement(dividerElement, {\n          key: `${key}-divider`,\n          style: [dividerElement.props.style, dividerStyle],\n        });\n\n        const _divider = isLast ? null : clonedDivider;\n\n        return [_child, _divider];\n      });\n\n  return (\n    <Flex {...rest}>\n      <Selector childrenStyle={[notLastChild(spacingStyle), childrenStyle]}>\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Stack;\n\nconst StackItem: React.FC = (props) => <View {...props} />;\n\nexport interface HStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const HStack: React.FC<HStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'row-reverse' : 'row'} />;\n};\n\nexport interface VStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const VStack: React.FC<VStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'column-reverse' : 'column'} />;\n};\n"]},"metadata":{},"sourceType":"module"}