{"ast":null,"code":"import { useEffect, useMemo } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { useTheme } from '../base/ThemeContext';\nconst inputRange = Array.from(Array(25).keys());\nexport const useAnimatedElevation = elevation => {\n  const animated = useMemo(() => new Animated.Value(elevation), []);\n  useEffect(() => {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [elevation]);\n  const {\n    elevations\n  } = useTheme();\n  return useMemo(() => [Platform.select({\n    android: {\n      elevation: animated\n    },\n    default: {\n      shadowColor: elevations[elevation].shadowColor,\n      shadowOffset: {\n        width: animated.interpolate({\n          inputRange,\n          outputRange: Object.values(elevations).map(e => {\n            var _e$shadowOffset$width, _e$shadowOffset;\n\n            return (_e$shadowOffset$width = (_e$shadowOffset = e.shadowOffset) === null || _e$shadowOffset === void 0 ? void 0 : _e$shadowOffset.width) !== null && _e$shadowOffset$width !== void 0 ? _e$shadowOffset$width : 0;\n          })\n        }),\n        height: animated.interpolate({\n          inputRange,\n          outputRange: Object.values(elevations).map(e => {\n            var _e$shadowOffset$heigh, _e$shadowOffset2;\n\n            return (_e$shadowOffset$heigh = (_e$shadowOffset2 = e.shadowOffset) === null || _e$shadowOffset2 === void 0 ? void 0 : _e$shadowOffset2.height) !== null && _e$shadowOffset$heigh !== void 0 ? _e$shadowOffset$heigh : 0;\n          })\n        })\n      },\n      shadowOpacity: animated.interpolate({\n        inputRange,\n        outputRange: Object.values(elevations).map(e => {\n          var _e$shadowOpacity;\n\n          return (_e$shadowOpacity = e.shadowOpacity) !== null && _e$shadowOpacity !== void 0 ? _e$shadowOpacity : 0;\n        })\n      }),\n      shadowRadius: animated.interpolate({\n        inputRange,\n        outputRange: Object.values(elevations).map(e => {\n          var _e$shadowRadius;\n\n          return (_e$shadowRadius = e.shadowRadius) !== null && _e$shadowRadius !== void 0 ? _e$shadowRadius : 0;\n        })\n      })\n    },\n    web: {\n      boxShadow: elevations[elevation].boxShadow,\n      transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'\n    }\n  }), Platform.select({\n    default: {},\n    web: {}\n  })], [elevation, elevations]);\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAyD,cAAzD;AACA,SAAoBC,QAApB,QAAoC,sBAApC;AAEA,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAND,CAAWA,KAAK,CAAC,EAAD,CAALA,CAAUE,IAAVF,EAAXA,CAAnB;AAEA,OAAO,MAAMG,oBAAoB,GAAIC,SAAD,IAAgD;EAClF,MAAMC,QAAQ,GAAGV,OAAO,CAAC,MAAM,IAAIC,QAAQ,CAACU,KAAb,CAAmBF,SAAnB,CAAP,EAAsC,EAAtC,CAAxB;EAEAV,SAAS,CAAC,MAAM;IACd,IAAIG,QAAQ,CAACU,EAATV,KAAgB,KAApB,EAA2B;IAC3BD,QAAQ,CAACY,MAATZ,CAAgBS,QAAhBT,EAA0B;MACxBa,OAAO,EAAEL,SADe;MAExBM,QAAQ,EAAE,GAFc;MAGxBC,eAAe,EAAE;IAHO,CAA1Bf,EAIGgB,KAJHhB;EAFO,GAON,CAACQ,SAAD,CAPM,CAATV;EASA,MAAM;IAAEmB;EAAF,IAAiBf,QAAQ,EAA/B;EAEA,OAAOH,OAAO,CACZ,MAAM,CACJE,QAAQ,CAACiB,MAATjB,CAAgB;IACdkB,OAAO,EAAE;MAAEX,SAAS,EAAEC;IAAb,CADK;IAEdW,OAAO,EAAE;MACPC,WAAW,EAAEJ,UAAU,CAACT,SAAD,CAAVS,CAAsBI,WAD5B;MAEPC,YAAY,EAAE;QACZC,KAAK,EAAEd,QAAQ,CAACe,WAATf,CAAqB;UAC1BN,UAD0B;UAE1BsB,WAAW,EAAEC,MAAM,CAACC,MAAPD,CAAcT,UAAdS,EAA0BE,GAA1BF,CAA+BG,CAAD;YAAA;;YAAA,mDAAOA,CAAC,CAACP,YAAT,oDAAOQ,gBAAgBP,KAAvB,yEAAgC,CAAhC;UAA9B;QAFa,CAArBd,CADK;QAKZsB,MAAM,EAAEtB,QAAQ,CAACe,WAATf,CAAqB;UAC3BN,UAD2B;UAE3BsB,WAAW,EAAEC,MAAM,CAACC,MAAPD,CAAcT,UAAdS,EAA0BE,GAA1BF,CAA+BG,CAAD;YAAA;;YAAA,oDAAOA,CAAC,CAACP,YAAT,qDAAOU,iBAAgBD,MAAvB,yEAAiC,CAAjC;UAA9B;QAFc,CAArBtB;MALI,CAFP;MAYPwB,aAAa,EAAExB,QAAQ,CAACe,WAATf,CAAqB;QAClCN,UADkC;QAElCsB,WAAW,EAAEC,MAAM,CAACC,MAAPD,CAAcT,UAAdS,EAA0BE,GAA1BF,CAA+BG,CAAD;UAAA;;UAAA,2BAAOA,CAAC,CAACI,aAAT,+DAA0B,CAA1B;QAA9B;MAFqB,CAArBxB,CAZR;MAgBPyB,YAAY,EAAEzB,QAAQ,CAACe,WAATf,CAAqB;QACjCN,UADiC;QAEjCsB,WAAW,EAAEC,MAAM,CAACC,MAAPD,CAAcT,UAAdS,EAA0BE,GAA1BF,CAA+BG,CAAD;UAAA;;UAAA,0BAAOA,CAAC,CAACK,YAAT,6DAAyB,CAAzB;QAA9B;MAFoB,CAArBzB;IAhBP,CAFK;IAuBd0B,GAAG,EAAE;MACHC,SAAS,EAAGnB,UAAU,CAACT,SAAD,CAAVS,CAA8BmB,SADvC;MAEHC,UAAU,EACR;IAHC;EAvBS,CAAhBpC,CADI,EA8BJA,QAAQ,CAACiB,MAATjB,CAAgB;IACdmB,OAAO,EAAE,EADK;IAEde,GAAG,EAAE;EAFS,CAAhBlC,CA9BI,CADM,EAoCZ,CAACO,SAAD,EAAYS,UAAZ,CApCY,CAAd;AAdK","names":["useEffect","useMemo","Animated","Platform","useTheme","inputRange","Array","from","keys","useAnimatedElevation","elevation","animated","Value","OS","timing","toValue","duration","useNativeDriver","start","elevations","select","android","default","shadowColor","shadowOffset","width","interpolate","outputRange","Object","values","map","e","_e$shadowOffset","height","_e$shadowOffset2","shadowOpacity","shadowRadius","web","boxShadow","transition"],"sources":["/home/francecsco/Scrivania/sito-web/node_modules/@react-native-material/core/lib/module/hooks/use-animated-elevation.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { Animated, Platform, StyleProp, ViewStyle } from 'react-native';\nimport { Elevation, useTheme } from '../base/ThemeContext';\n\nconst inputRange = Array.from(Array(25).keys());\n\nexport const useAnimatedElevation = (elevation: Elevation): StyleProp<ViewStyle> => {\n  const animated = useMemo(() => new Animated.Value(elevation), []);\n\n  useEffect(() => {\n    if (Platform.OS === 'web') return;\n    Animated.timing(animated, {\n      toValue: elevation,\n      duration: 200,\n      useNativeDriver: true,\n    }).start();\n  }, [elevation]);\n\n  const { elevations } = useTheme();\n\n  return useMemo(\n    () => [\n      Platform.select({\n        android: { elevation: animated },\n        default: {\n          shadowColor: elevations[elevation].shadowColor,\n          shadowOffset: {\n            width: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.width ?? 0),\n            }),\n            height: animated.interpolate({\n              inputRange,\n              outputRange: Object.values(elevations).map((e) => e.shadowOffset?.height ?? 0),\n            }),\n          },\n          shadowOpacity: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowOpacity ?? 0),\n          }),\n          shadowRadius: animated.interpolate({\n            inputRange,\n            outputRange: Object.values(elevations).map((e) => e.shadowRadius ?? 0),\n          }),\n        },\n        web: {\n          boxShadow: (elevations[elevation] as any).boxShadow,\n          transition:\n            'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n        },\n      }),\n      Platform.select({\n        default: {},\n        web: {},\n      }),\n    ],\n    [elevation, elevations]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}