{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { View } from 'react-native';\nimport Flex from './Flex';\nimport Selector from './Selector';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nconst Wrap = _ref => {\n  let {\n    spacing = 0,\n    shouldWrapChildren = false,\n    childrenStyle,\n    children,\n    ...rest\n  } = _ref;\n  const spacingValue = useSpacing(spacing);\n  const validChildren = getValidChildren(children);\n  const clones = !shouldWrapChildren ? validChildren : validChildren.map((child, index) => {\n    const key = typeof child.key !== 'undefined' ? child.key : index;\n    return /*#__PURE__*/React.createElement(WrapItem, {\n      key: key\n    }, child);\n  });\n  return /*#__PURE__*/React.createElement(Flex, _extends({\n    mt: -spacing,\n    ms: -spacing,\n    inline: true,\n    wrap: true\n  }, rest), /*#__PURE__*/React.createElement(Selector, {\n    childrenStyle: [{\n      marginTop: spacingValue,\n      marginStart: spacingValue\n    }, childrenStyle]\n  }, clones));\n};\n\nexport default Wrap;\n\nconst WrapItem = props => /*#__PURE__*/React.createElement(View, props);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;;AAkBA,MAAMC,IAAyB,GAAGC,QAM5B;EAAA,IAN6B;IACjCC,OAAO,GAAG,CADuB;IAEjCC,kBAAkB,GAAG,KAFY;IAGjCC,aAHiC;IAIjCC,QAJiC;IAKjC,GAAGC;EAL8B,IAM7BL;EACJ,MAAMM,YAAY,GAAGT,UAAU,CAACI,OAAD,CAA/B;EAEA,MAAMM,aAAa,GAAGT,gBAAgB,CAACM,QAAD,CAAtC;EAEA,MAAMI,MAAM,GAAG,CAACN,kBAAD,GACXK,aADW,GAEXA,aAAa,CAACE,GAAdF,CAAkB,CAACG,KAAD,EAAQC,KAAR,KAAkB;IAClC,MAAMC,GAAG,GAAG,OAAOF,KAAK,CAACE,GAAb,KAAqB,WAArB,GAAmCF,KAAK,CAACE,GAAzC,GAA+CD,KAA3D;IACA,oBAAOlB,oBAACoB,QAAD;MAAUD,GAAG,EAAEA;IAAf,GAAqBF,KAArB,CAAP;EAFF,EAFJ;EAOA,oBACEjB,oBAACE,IAAD;IAAMmB,EAAE,EAAE,CAACb,OAAX;IAAoBc,EAAE,EAAE,CAACd,OAAzB;IAAkCe,MAAM,MAAxC;IAAyCC,IAAI;EAA7C,GAAkDZ,IAAlD,gBACEZ,oBAACG,QAAD;IACEO,aAAa,EAAE,CACb;MAAEe,SAAS,EAAEZ,YAAb;MAA2Ba,WAAW,EAAEb;IAAxC,CADa,EAEbH,aAFa;EADjB,GAMGK,MANH,CADF,CADF;AAlBF;;AAgCA,eAAeT,IAAf;;AAEA,MAAMc,QAAkB,GAAIO,KAAD,iBAAW3B,oBAACC,IAAD,EAAU0B,KAAV,CAAtC","names":["React","View","Flex","Selector","useSpacing","getValidChildren","Wrap","_ref","spacing","shouldWrapChildren","childrenStyle","children","rest","spacingValue","validChildren","clones","map","child","index","key","WrapItem","mt","ms","inline","wrap","marginTop","marginStart","props"],"sources":["/home/francecsco/Scrivania/Sito-React/node_modules/react-native-flex-layout/lib/module/Wrap.tsx"],"sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector from './Selector';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface WrapProps extends FlexProps, SelectorProps {\n  /**\n   * The space between each child (even if it wraps).\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Wrap: React.FC<WrapProps> = ({\n  spacing = 0,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const validChildren = getValidChildren(children);\n\n  const clones = !shouldWrapChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        return <WrapItem key={key}>{child}</WrapItem>;\n      });\n\n  return (\n    <Flex mt={-spacing} ms={-spacing} inline wrap {...rest}>\n      <Selector\n        childrenStyle={[\n          { marginTop: spacingValue, marginStart: spacingValue },\n          childrenStyle,\n        ]}\n      >\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Wrap;\n\nconst WrapItem: React.FC = (props) => <View {...props} />;\n"]},"metadata":{},"sourceType":"module"}